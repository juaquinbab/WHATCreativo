const express = require('express');
const path = require('path');
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const colors = require('colors');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const bodyParser = require('body-parser');
require('dotenv').config();
const multer = require('multer'); // Para manejar la carga de archivos

const app = express();

app.use(express.static(__dirname + '/public'));

const port = process.env.PORT;


const SESSION_FILE_PATH = './session.json';

let sessionData;

if (fs.existsSync(SESSION_FILE_PATH)) {
  sessionData = require(SESSION_FILE_PATH);
}



const client = new Client({
    puppeteer: {
      // executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
      args: ['--no-sandbox']
    },
    authStrategy: new LocalAuth({ clientId: "Client-one" }),
    webVersionCache: {
      type: 'remote',
      remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html', // Tried 2.2412.54 still same result
    }
  });

client.on('qr', (qr) => {
  qrcode.generate(qr, { small: true });
});




client.on('authenticated', (session) => {
  console.log('Conexi√≥n exitosa');
  sessionData = session;
  if (sessionData) {
      fs.writeFile(SESSION_FILE_PATH, JSON.stringify(session), (err) => {
          if (err) {
              console.error(err);
          }
      });
  }
});





  // const mediaFilemp3 = MessageMedia.fromFilePath(`./public/media/${'image.mp3'}`)
  // const mediaFilemp4 = MessageMedia.fromFilePath(`./public/media/${'image.mp4'}`)
  const mediaFilejpg = MessageMedia.fromFilePath(`./public/media/${'1.png'}`)


let MSGbien = null; // inicia el Mensaje de bienvenida
let etapa = 0;

const registro = {

  '573217088282@c.us': { etapa: 0, numeroDocumento: '' },
  '5213315185300@c.us': { etapa: 0, numeroDocumento: '' },
  '573196693304@c.us': { etapa: 0, numeroDocumento: '' },
  '573057739373@c.us': { etapa: 0, numeroDocumento: '' },
  '5213343468550@c.us': { etapa: 0, numeroDocumento: '' },
  '573102447244@c.us': { etapa: 0, numeroDocumento: '' },
  '573023477836@c.us': { etapa: 0, numeroDocumento: '' }

}; // Registra los numeros telefono que inician al programa 

// setInterval(() => {
//   console.log(registro)
// }, 5000);


client.on('message', async (message) => {
  console.log(`Mensaje recibido de ${message.from}: ${message.body}`);


  setInterval(() => {
    console.log('Registros', registro);
  }, 180000);


  // Este codigo verifica que ya se envio el mensaje de bienvenida
  if (!registro[message.from]) {
    client.sendMessage(message.from, '¬°Hola! üëã Bienvenido a Creativos Code. Somos expertos en soluciones de comunicaci√≥n empresarial, incluyendo estrategias de BOT de WhatsApp y automatizaciones web.\n\n  üöÄüì≤ *¬°Estamos aqu√≠ para potenciar tu negocio!* üíºüåü\n \n 1Ô∏è‚É£ Bot de WhatsaApp \n \n 2Ô∏è‚É£ Soporte Tecnico \n \n 3Ô∏è‚É£ Mas sobre Creativo Code \n \n 4Ô∏è‚É£ Realizar pagos \n \n 5Ô∏è‚É£ Creaci√≥n de paginas Web \n \n 6Ô∏è‚É£ Manejo de Redes Sociales \n \n *Escriba el n√∫mero de su solicitud*');
    client.sendMessage(message.from, mediaFilejpg)

    registro[message.from] = { etapa: 0, numeroDocumento: '' };
    // registro[message.from] = true; // Register the phone number
    return;
  }

  if (MSGbien !== null) { // Check if MSGbien exists
    client.sendMessage(message.from, MSGbien);
    MSGbien = null; // Reset to a falsy value after sending
  } else {
    console.log('Error al verificar el mensaje de bienvenida');
  }

  // setTimeout(() => {
  //   delete registro[message.from];
  // }, 150 * 10000);






  switch (registro[message.from].etapa) {



    case 0:
      const mensajeEnMinusculas = message.body.toLowerCase();
      if (message.body === ('1')) {
        client.sendMessage(message.from, ' üöÄ Optimiza tu Atenci√≥n al Cliente con Chatbots de WhatsApp\n \n¬øBuscas una soluci√≥n eficiente para atender a tus clientes las 24 horas del d√≠a? Los chatbots de WhatsApp son la respuesta.\n\nAqu√≠ te explico por qu√© deber√≠as considerarlos: \n\nPresencia donde los clientes est√°n: WhatsApp es la aplicaci√≥n de mensajer√≠a m√°s popular del mundo, con m√°s de dos mil millones de usuarios activos mensuales. En Latinoam√©rica, un 80% de la poblaci√≥n utiliza WhatsApp. \n\nAtenci√≥n 24/7: Los chatbots est√°n disponibles todo el tiempo y responden m√°s r√°pidamente que los agentes humanos. Esto se traduce en mayores tasas de satisfacci√≥n del cliente.\n \n Si quiere iniciar la prueba escribe INICIAR \n \n *INICIAR*');
        // client.sendMessage(message.from, mediaFilemp4)
        registro[message.from].etapa = 13;
      } else if (message.body === ('2')) {
        client.sendMessage(message.from, 'En un momento sera atendido por un asesor. gracias por elegirnos wwww.creativoscode.com');
        registro[message.from].etapa = 12;

      } else if (message.body === ('3')) {
        client.sendMessage(message.from, 'Somos una empresa con m√°s de 5 a√±os de experiencia en software y atenci√≥n al usuario. Hemos brindado nuestros servicios en el sector Salud, y ahora estamos expandiendo nuestro enfoque para ayudar a todas las microempresas que desean implementar la automatizaci√≥n en sus interacciones con los usuarios. \n \n *visite* \n \nwwww.creativocode.com');
        registro[message.from].etapa = 12;
        delete registro[message.from];
      } else if (message.body === ('4')) {
        client.sendMessage(message.from, ' Realice el pago por medio de este link: \n \n  https://checkout.bold.co/payment/LNK_DKL4KXER5A ');
        registro[message.from].etapa = 12;
        delete registro[message.from];
      } else if (message.body === ('5')) {
        client.sendMessage(message.from, 'Dise√±amos su p√°gina web, una plataforma moderna y f√°cil de usar para sus usuarios, por un costo de 850.000, que incluye el dominio por un a√±o.');
        registro[message.from].etapa = 12;
        delete registro[message.from];
      } else if (message.body === ('6')) {
        client.sendMessage(message.from, 'Gestionamos sus redes sociales con dise√±os y publicaciones semanales por un costo de 350.000, que incluye 4 publicaciones semanales en im√°genes y contenido en video');
        registro[message.from].etapa = 12;
        delete registro[message.from];
      }
      break;





    case 12:
      if (message.body.length > 2) {
        // Verificar si el mensaje tiene m√°s de 2 letras
        client.sendMessage(message.from, 'Gracias por elegirnos');
        registro[message.from].etapa = 21;
        delete registro[message.from];
      }
      break;


    case 13:
      if (message.body === "INICIAR" || message.body === "iniciar" || message.body === "Iniciar") {
        // Verificar si el mensaje tiene m√°s de 2 letras
        client.sendMessage(message.from, 'Para Iniciar por favor ind√≠queme en un solo mensaje su: \n \n *Nombre:* \n \n *E-Mail* \n \n A que se dedica su negocio y lo que le gustar√≠a que hiciera el Bot con sus clientes. ');
        registro[message.from].etapa = 20;

      }
      break;

    case 20:
      if (message.body.length > 2) {
        // Verificar si el mensaje tiene m√°s de 2 letras
        client.sendMessage(message.from, 'Vamos a preparar tu Bot. Pronto recibiras una llamada de uno de nuestros asesores*');
        registro[message.from].etapa = 21;
      
      }
      break;






  }


});




// Desde aqui inica el cargue de la imagen al servidor 

// Configura multer para guardar las im√°genes en la carpeta "media"
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'media'); // Directorio de destino para las im√°genes
  },
  filename: (req, file, cb) => {
    // Define el nombre del archivo como "image" y aseg√∫rate de que sea √∫nico
    const extname = path.extname(file.originalname);
    const filename = 'image' + extname;
    cb(null, filename);
  },
});

const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    // Verifica si el archivo ya existe en "media" y lo elimina si es necesario
    const filePath = path.join('media', 'image' + path.extname(file.originalname));
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
    cb(null, true);
  },
});

app.post('/upload', upload.single('image'), (req, res) => {
  // Mostrar un mensaje emergente en HTML
  const successMessage = `
    <div id="popup" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #fff; padding: 20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); text-align: center;">
      <p>Imagen cargada con √©xito</p>
      <button onclick="closePopup()">Cerrar</button>
    </div>
    <script>
      function closePopup() {
        document.getElementById('popup').style.display = 'none';
        // Redirige de nuevo a la p√°gina anterior
        window.location.href = '/'; // Cambia esto al URL de tu p√°gina
      }
    </script>
  `;
  res.send(successMessage);
});


// 



let MSGenvio = true;




// Desde aqui Robot de envio Mesivo

client.on('auth_failure', (msg) => {
  console.error('Error de autenticaci√≥n:', msg);
});


client.on('ready', () => {
  console.log('Cliente listo');
});

client.initialize();


app.use(bodyParser.json()); // Usar body-parser para analizar JSON
app.use(bodyParser.urlencoded({ extended: true })); // Usar body-parser para analizar datos codificados en URL

// Array para almacenar los registros de mensajes enviados
const registros = [];

// app.get('/', (req, res) => {
//   res.sendFile('index.html');
//  });


app.post('/procesar', (req, res) => {
  const { numbers, messages } = req.body;

  console.log('N√∫meros de Tel√©fono:', numbers);
  console.log('Mensajes:', messages);

  if (!numbers || !messages) {
    res.status(400).send('Los datos enviados no son v√°lidos.');
    return;
  }

  if (!Array.isArray(numbers) || !Array.isArray(messages)) {
    res.status(400).send('Los datos enviados no son v√°lidos.');
    return;
  }


  const sendMedia = (to, file) => {
    const mediaFile = MessageMedia.fromFilePath(`./media/${file}`)
    client.sendMessage(to, mediaFile)
  }


  // ///////////////////////////////////////

  let messageCounter = 0;



  app.post('/cambiar', (req, res) => {
    MSGenvio = !MSGenvio; // Cambiamos el valor de MSGenvio
    res.json({ MSGenvio });
  });





  setInterval(() => {
    console.log("MSGenvio:", MSGenvio);
  }, 1000);


  app.use(express.json());

  // ///////////////////////////////////////////////////////////////


  numbers.forEach((phoneNumber, index) => {
    const phoneNumberWithSuffix = `${phoneNumber}@c.us`;
    const message = messages[index] || ""; // Asigna una cadena vac√≠a si el mensaje no est√° presente para ese n√∫mero



    setTimeout(() => {

      if (MSGenvio) {
        sendMedia(phoneNumberWithSuffix, 'image.jpg');
      }
      client.sendMessage(phoneNumberWithSuffix, message)
        .then(() => {
          const registro = {
            mensaje: `Mensaje ${++messageCounter} enviado a ${phoneNumberWithSuffix}`,
            numero: phoneNumberWithSuffix
          };

          registros.push(registro); // Agregar el registro al array de registros
          console.log(registro.mensaje.green);

          // Verifica si est√°s en el √∫ltimo elemento del array
          if (index === numbers.length - 1) {
            registros.push({ mensaje: 'Termin√© de enviar los mensajes', numero: 'Oprima el boton borra registro' });
            console.log('Termin√© de enviar');
          }
        })
        .catch((error) => {
          console.log(`Error al enviar el mensaje a ${phoneNumberWithSuffix}: ${error.message}`.red);
        });
    }, 15000 * (index + 1));
  });




  res.status(200).send('Datos recibidos correctamente');


  app.get('/registros', (req, res) => {
    const ultimosRegistros = registros.slice(-10); // Obtener los √∫ltimos 10 registros

    res.json(ultimosRegistros); // Enviar los √∫ltimos 10 registros como respuesta en formato JSON
  });

});

// Ruta para borrar los registros
app.delete('/borrar-registros', (req, res) => {
  registros.length = 0; // Borra todos los registros
  res.json({ message: 'Registros borrados exitosamente' });
});






app.listen(port, () => {
  console.log(`Servidor Express escuchando en el puerto ${port}`);
});